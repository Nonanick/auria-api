"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const maestro_class_1 = require("../../dist/maestro/maestro.class");
const chai_1 = require("chai");
const container_class_1 = require("../../dist/container/container.class");
const controller_class_1 = require("../../dist/controller/controller.class");
const MockedAdapter_1 = require("../mock/adapter/MockedAdapter");
describe('Maestro', () => {
    let maestro;
    let controller;
    let container;
    beforeEach(() => {
        maestro = new maestro_class_1.Maestro();
        container = new class extends container_class_1.Container {
            constructor() {
                super(...arguments);
                this.baseURL = '';
            }
        };
        controller = new class extends controller_class_1.Controller {
            constructor() {
                super(...arguments);
                this.baseURL = '';
            }
        };
    });
    it('Is created empty', () => {
        chai_1.expect(maestro.allRoutes().length).eq(0);
        chai_1.expect(maestro.containers().length).eq(0);
        chai_1.expect(maestro.controllers().length).eq(0);
    });
    it('Add containers', () => {
        maestro.add(container);
        chai_1.expect(maestro.containers().length).eq(1);
    });
    it('Remove containers', () => {
        maestro.add(container);
        chai_1.expect(maestro.containers().length).eq(1);
        maestro.removeChildContainer(container);
        chai_1.expect(maestro.containers().length).eq(0);
    });
    it('Add controllers', () => {
        maestro.add(controller);
        chai_1.expect(maestro.controllers().length).eq(1);
    });
    it('Remove controllers', () => {
        maestro.add(controller);
        chai_1.expect(maestro.controllers().length).eq(1);
        maestro.removeController(controller);
        chai_1.expect(maestro.controllers().length).eq(0);
    });
    it('Add adapters', () => {
        const adapter = new MockedAdapter_1.MockedAdapter;
        maestro.addAdapter(adapter);
        chai_1.expect(Object.values(maestro.adapters).length).eq(1);
    });
    it('Remove adapters', () => {
        const adapter = new MockedAdapter_1.MockedAdapter;
        maestro.addAdapter(adapter);
        chai_1.expect(Object.values(maestro.adapters).length).eq(1);
        delete maestro.adapters[adapter.name];
        chai_1.expect(Object.values(maestro.adapters).length).eq(0);
    });
    it('Inherit routes from container', () => {
        controller.resolve = () => { };
        container.allRoutes = () => {
            const routes = [{
                    url: 'mock',
                    methods: 'get',
                    controller,
                    resolver: controller.resolve,
                    requestProxies: [],
                    responseProxies: []
                }];
            return routes;
        };
        maestro.use(container);
        chai_1.expect(maestro.allRoutes().length).eq(1);
    });
    it('Inherit routes from controller', () => {
        controller.resolve = () => { };
        controller.allRoutes = () => {
            const routes = [{
                    url: 'mock',
                    methods: 'get',
                    controller,
                    resolver: controller.resolve,
                    requestProxies: [],
                    responseProxies: []
                }];
            return routes;
        };
        // By inheriting from container
        it('indirectly from container', () => {
            container.addController(controller);
            maestro.use(container);
            chai_1.expect(maestro.allRoutes().length).eq(1);
            maestro.removeChildContainer(container);
            maestro.deleteCachedRoutes();
        });
        // By directling adding it
        it('directly adding to maestro', () => {
            chai_1.expect(maestro.allRoutes().length).eq(0);
            maestro.deleteCachedRoutes();
            maestro.use(controller);
            chai_1.expect(maestro.allRoutes().length).eq(1);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,