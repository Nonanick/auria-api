import { ApiRequestHandler } from './ApiRequestHandler';
import { ApiCallResolver } from '../resolver/ApiCallResolver';
import { IApiAdapter } from '../adapter/IApiAdapter';
import { ApiContainer } from '../container/ApiContainer';
import { RouteSchemaEnforcer } from '../validation/policies/schema/RouteSchemaEnforcer';
import { FailedSchemaValidationPolicyEnforcer } from '../validation/policies/property/FailedSchemaValidationPolicy';

export interface IApiMaestro extends ApiContainer {

	/**
	 * Api Call Resolver
	 * ------------------
	 * 
	 * Handles how the controller method will be called
	 * 
	 * Call resolver has access to:
	 * 1. ApiRoute - The route properties, with all of its proxies
	 * 2. ApiRequest - The request (generated by an adapter)
	 * 3. SendResponse - A function given by the adapter to send a response 
	 * to the caller
	 * 4. SendError - A function, given by the adapter, to send a error response
	 * to the caller 
	 * 
	 * @param resolver 
	 */
	setCallResolver(resolver: ApiCallResolver): void;

	/**
	 * Parameter Validation
	 * ---------------------
	 * 
	 * Defines how the route parameters validation will be handled
	 * 
	 * @param validation 
	 */
	setSchemaValidation(validation: FailedSchemaValidationPolicyEnforcer): void;

	/**
	 * Schema Validation
	 * ------------------
	 * 
	 * Defines how the schema defined by the route will be enforced
	 * 
	 * @param validation 
	 */
	setSchemaEnforcer(validation: RouteSchemaEnforcer): void;

	/**
	 * Handle
	 * ------
	 * 
	 * Function exposed to all adapters that receives 
	 */
	handle: ApiRequestHandler;

	addAdapter(adapter: IApiAdapter): void;

	start(): void;

}