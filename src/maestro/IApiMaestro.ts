import { IApiAdapter } from '../adapter/IApiAdapter';
import { ApiContainer } from '../container/ApiContainer';
import { IProxiedApiRoute } from '../proxy/IProxiedApiRoute';
import { IApiRouteRequest } from '../request/IApiRouteRequest';
import { ApiSendErrorFunction } from './ApiSendErrorFunction';
import { ApiSendResponseFunction } from './ApiSendResponseFunction';
import { RequestHandler } from './composition/RequestHandler';

export interface IApiMaestro extends ApiContainer {

	/**
	 * Api Call Resolver
	 * ------------------
	 * 
	 * Handles how the controller method will be called
	 * 
	 * Call resolver has access to:
	 * 1. ApiRoute - The route properties, with all of its proxies
	 * 2. ApiRequest - The request (generated by an adapter)
	 * 3. SendResponse - A function given by the adapter to send a response 
	 * to the caller
	 * 4. SendError - A function, given by the adapter, to send a error response
	 * to the caller 
	 * 
	 * @param resolver 
	 */
	setRequestHandler(resolver: RequestHandler): void;


	/**
	 * Handle
	 * ------
	 * 
	 * Function exposed to all adapters that receives 
	 */
	handle(
		route: IProxiedApiRoute,
		request: IApiRouteRequest,
		sendResponse: ApiSendResponseFunction,
		sendError: ApiSendErrorFunction,
	): void;

	addAdapter(adapter: IApiAdapter): void;

	start(): void;

}